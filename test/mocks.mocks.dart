// Mocks generated by Mockito 5.4.6 from annotations
// in toko_kita/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:toko_kita/data/datasource/remote/purchase/purchase_datasource.dart'
    as _i2;
import 'package:toko_kita/data/models/purchase/purchase_model.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PurchaseDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPurchaseDatasource extends _i1.Mock
    implements _i2.PurchaseDatasource {
  MockPurchaseDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> addPurchase(_i4.PurchaseModel? purchase) =>
      (super.noSuchMethod(
            Invocation.method(#addPurchase, [purchase]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.PurchaseModel>> getAllPurchases() =>
      (super.noSuchMethod(
            Invocation.method(#getAllPurchases, []),
            returnValue: _i3.Future<List<_i4.PurchaseModel>>.value(
              <_i4.PurchaseModel>[],
            ),
          )
          as _i3.Future<List<_i4.PurchaseModel>>);

  @override
  _i3.Future<void> deletePurchase(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deletePurchase, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i4.PurchaseModel?> getPurchaseById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getPurchaseById, [id]),
            returnValue: _i3.Future<_i4.PurchaseModel?>.value(),
          )
          as _i3.Future<_i4.PurchaseModel?>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getPurchaseBatches(
    String? productId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getPurchaseBatches, [productId]),
            returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<void> updatePurchaseQuantity(String? docId, int? newQuantity) =>
      (super.noSuchMethod(
            Invocation.method(#updatePurchaseQuantity, [docId, newQuantity]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<int> getCurrentStock(String? productId) =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentStock, [productId]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<int> getHPPPreview({
    required String? productId,
    required int? quantity,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getHPPPreview, [], {
              #productId: productId,
              #quantity: quantity,
            }),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<void> updatePurchaseBatch(
    String? productId,
    List<Map<String, dynamic>>? updatedBatches,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updatePurchaseBatch, [
              productId,
              updatedBatches,
            ]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> savePurchaseBatch({
    required String? productId,
    required int? quantity,
    required int? purchasePrice,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#savePurchaseBatch, [], {
              #productId: productId,
              #quantity: quantity,
              #purchasePrice: purchasePrice,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
