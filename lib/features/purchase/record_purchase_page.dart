import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:intl/intl.dart';
import 'package:loading_animation_widget/loading_animation_widget.dart';
import 'package:toko_kita/data/models/purchase/purchase_model.dart';
import 'package:toko_kita/widgets/product_dropdown.dart';

import '../../utils/theme.dart';
import '../../widgets/common_button.dart';
import '../../widgets/textfield_auth_custom.dart';
import '../../widgets/textfield_date.dart';
import '../stock/bloc/stock_bloc.dart';
import 'bloc/purchase_bloc.dart';

class RecordPurchasePage extends StatefulWidget {
  const RecordPurchasePage({super.key});

  @override
  State<RecordPurchasePage> createState() => _RecordPurchasePageState();
}

class _RecordPurchasePageState extends State<RecordPurchasePage> {
  final TextEditingController priceController = TextEditingController();
  final TextEditingController quantityController = TextEditingController();
  final TextEditingController dateController = TextEditingController();
  String? selectedProductId;
  String? selectedProductName;
  String? selectedUnit;

  bool _isFormValid() {
    return selectedProductId != '' &&
        int.tryParse(priceController.text.trim()) != null &&
        int.tryParse(quantityController.text.trim()) != null &&
        dateController.text.trim().isNotEmpty;
  }

  void _submit() {
    if (!_isFormValid()) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Please fill all required fields")),
      );
      return;
    }

    final name = selectedProductName;
    final price = int.parse(priceController.text.trim());
    final qty = int.parse(quantityController.text.trim());
    final date = DateFormat('dd/MM/yyyy').parse(dateController.text.trim());
    final now = DateTime.now();

    final purchaseDate = DateTime(
      date.year,
      date.month,
      date.day,
      now.hour,
      now.minute,
      now.second,
    );

    final product = PurchaseModel(
      quantity: qty,
      originalQuantity: qty,
      productId: selectedProductId!,
      productName: name!,
      purchaseDate: purchaseDate,
      purchasePrice: price,
      id: null, // id will be generated by the backend
    );

    qty <= 0 || price <= 0
        ? ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text("Quantity and Price must be greater than 0")),
          )
        : context.read<PurchaseBloc>().add(PurchaseEvent.addPurchase(product));

  }


  @override
  void initState() {
    super.initState();
    dateController.text = DateFormat('dd/MM/yyyy').format(DateTime.now());
  }

  @override
  void dispose() {
    priceController.dispose();
    quantityController.dispose();
    dateController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: baseColor,
      appBar: AppBar(
        backgroundColor: baseColor,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: blackColor),
          onPressed: () {
            final router = GoRouter.of(context);
            debugPrint(router.routerDelegate.currentConfiguration.fullPath);

            context.pushReplacementNamed(
              'navbar',
              pathParameters: {'pageIndex': '2'},
            );


          },
        ),
        title: const Text('Record Purchase', style: txtSecondaryTitle),
        centerTitle: true,
      ),
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
               ProductDropdown(
                onSelected: (String productId, String productName, String unit) {
                  setState(() {
                    selectedProductId = productId;
                    selectedProductName = productName;
                    selectedUnit = unit;
                  });
                },),
              if (selectedUnit != null) ...[
                const SizedBox(height: 12),
                _UnitDropdown(selected: selectedUnit!),
              ],
              const SizedBox(height: 12),
              CustomTextFieldGeneral(
                title: "Unit Purchase Price",
                controller: priceController,
                keyboardType: TextInputType.number,
              ),
              const SizedBox(height: 12),
              CustomTextFieldGeneral(
                title: "Quantity Purchased",
                controller: quantityController,
                keyboardType: TextInputType.number,
              ),
              const SizedBox(height: 12),
              EntryDateTextField(controller: dateController, hintText: 'Date'),
              const Spacer(),
              Text(
                "Uses FIFO logic for reducing stock",
                style: txtSecondarySubTitle.copyWith(color: secondaryColor),
              ),
              const SizedBox(height: 12),
              // ⬇️ BlocConsumer Section
              BlocConsumer<PurchaseBloc, PurchaseState>(
                listener: (context, state) {
                  state.maybeWhen(
                    error: (message) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text(message ?? 'Something went wrong'),
                        ),
                      );
                    },
                    success: (_) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(
                          content: Text('Purchase recorded successfully'),
                        ),
                      );
                      context.goNamed('navbar', pathParameters: {'pageIndex': '1'});
                      context.read<StockBloc>().add(const StockEvent.getAll());
                    },
                    orElse: () {},
                  );
                },
                builder: (context, state) {
                  return state.maybeWhen(
                    orElse: () {
                      return CommonButton(
                        text: 'Submit',
                        onPressed: _submit,
                        borderRadius: 10,
                        height: 55,
                        width: MediaQuery.of(context).size.width,
                        fontSize: 18,
                      );
                    },
                    loading: () {
                      return CommonButton(
                        text: 'Adding...',
                        onPressed: () {},
                        borderRadius: 10,
                        height: 55,
                        width: MediaQuery.of(context).size.width,
                        fontSize: 18,
                        widget: LoadingAnimationWidget.staggeredDotsWave(
                          color: baseColor,
                          size: 40,
                        ),
                      );
                    },
                  );
                },
              ),
            ],
          ),
        ),
      ),
    );
  }
}


class _UnitDropdown extends StatelessWidget {
  final String selected;

  const _UnitDropdown({required this.selected});

  @override
  Widget build(BuildContext context) {
    return IgnorePointer(
      child: DropdownButtonFormField<String>(
        value: selected,
        decoration: InputDecoration(
          filled: true,
          fillColor: baseColor50,
          hintText: 'Unit',
          hintStyle: txtSecondaryTitle.copyWith(
            fontWeight: FontWeight.w400,
            color: grey,
          ),
          enabled: selected == '',
          disabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20),
            borderSide: const BorderSide(color: grey, width: 1),
          ),
          contentPadding:
          const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20),
            borderSide: const BorderSide(color: primaryColor, width: 1),
          ),
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(20),
            borderSide: const BorderSide(color: grey, width: 1),
          ),
        ),
        icon: Icon(Icons.keyboard_arrow_down, color: selected != '' ? grey : blackColor,),
        style: txtSecondaryTitle.copyWith(
          fontWeight: FontWeight.w600,
          color: selected != '' ? grey : blackColor,
        ),
        items: [
          DropdownMenuItem(value: selected, child: Text(selected)),
        ],
        onChanged: (_) {},
      ),
    );
  }
}